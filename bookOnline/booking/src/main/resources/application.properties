## server configuration
## server configuration
server.port=9050
spring.application.name= booking

## Logging configuration
logging.level.org.springframework.data.elasticsearch.client.WIRE=TRACE

## Health management configuration
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true
management.metrics.tags.application= ${spring.application.name}

# Swagger API configuration
dataservice.openapi.dev-url=http://localhost:9090
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true

# Redis configuration
spring.redis.host=127.0.0.1
spring.redis.port=6379
cart.booking.detail.namespace=cartDetail
cart.booking.detail.ttl.ms=3600000
cart.booking.seats.lock.namespace=seatsLock
cart.booking.seats.lock.ttl.ms=300000
cart.booking.seats.dis.lock.timeout=300

spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
spring.datasource.url= jdbc:mysql://localhost:3306/mybookingdb
spring.datasource.username= root
spring.datasource.password= password
spring.jpa.show-sql= true
spring.jpa.defer-datasource-initialization= true
spring.jpa.database-platform= org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto= create

## MQ configuration
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
shows.seats.publisher.exchange=seatsInventory
order.create.queue=order_create_queue 
order.create.exchange.direct=order_create_direct_exchange 
order.cancel.queue=order_cancel_queue
order.cancel.exchange.fanout=order_cancel_fanout_exchange
order.processed.queue=order_processed_queue
order.processed.exchange.fanout=order_processed_fanout_exchange
order.seat.lock.queue=order_seat_lock_queue
onboard.seat.lock.queue=onboard_seat_lock_queue
order.payment.processed_queue=order_payment_queue
order.movie.ticket.booked=movie_ticket_booked_queue
order.movie.ticket.cancel=movie_ticket_cancel_queue


## Circuit breaker, retry and ratelimiter pattern while calling other microservices
resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true
resilience4j.circuitbreaker.instances.onboardCheckSeatCapacity.minimumNumberOfCalls= 5
resilience4j.circuitbreaker.instances.onboardCheckSeatCapacity.failureRateThreshold= 50
resilience4j.circuitbreaker.instances.onboardCheckSeatCapacity.waitDurationInOpenState= 30000
resilience4j.circuitbreaker.instances.onboardCheckSeatCapacity.permittedNumberOfCallsInHalfOpenState=2

resilience4j.retry.configs.default.registerHealthIndicator= true
resilience4j.retry.instances.retryToCheckSeatCapacity.maxRetryAttempts=3
resilience4j.retry.instances.retryToCheckSeatCapacity.waitDuration=2000

## OAuth Server details
security.oauth2.resourceserver.jwt.jwk-set-uri= http://localhost:7080/realms/master/protocol/openid-connect/certs
mbp.booking.API_KEY=bookingAPIKey
mbp.onboard.API_KEY=TestAPIKey
